% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_tests.R
\name{register_test}
\alias{register_test}
\title{Register a Custom Test Function in ValidMind}
\usage{
register_test(func, test_id = NULL, description = NULL, required_inputs = NULL)
}
\arguments{
\item{func}{An R function to be registered as a custom test.}

\item{test_id}{A unique identifier for the test. If \code{NULL}, a default ID is generated based on the function name.}

\item{description}{A description of the test. If \code{NULL}, the function's \code{description} attribute is used, or "No description" if not available.}

\item{required_inputs}{A character vector specifying the required inputs for the test. If \code{NULL}, the function's formal argument names are used.}
}
\value{
Invisibly returns \code{NULL}. This function is called for its side effects.
}
\description{
Registers an R function as a custom test within the ValidMind testing framework, allowing it to be used as a metric in model validation.
}
\details{
The function converts the provided R function into a Python callable using \code{\link[reticulate]{r_to_py}}, and then defines a Python class that wraps this callable.
This Python class inherits from ValidMind's \code{Metric} class and is registered in ValidMind's test store.

The custom test can then be used within ValidMind's testing framework to validate models.
}
\examples{
\dontrun{
# Define a custom test function in R
my_custom_metric <- function(predictions, targets) {
  # Custom metric logic
  mean(abs(predictions - targets))
}

# Register the custom test
register_test(
  func = my_custom_metric,
  test_id = "custom.mae",
  description = "Custom Mean Absolute Error",
  required_inputs = c("predictions", "targets")
)
}

}
\seealso{
\code{\link[reticulate]{r_to_py}}, \code{\link[reticulate]{import_main}}, \code{\link[reticulate]{py_run_string}}
}
