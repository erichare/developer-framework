% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/custom_tests.R
\name{register_test}
\alias{register_test}
\title{Register Test for Custom Metrics Function}
\usage{
register_test(func)
}
\arguments{
\item{func}{Function. The R function to be converted into a custom metric class.}
}
\value{
The original function, after it has been registered as a custom test in the Python environment.
}
\description{
This function serves as a decorator to convert an R function into a custom metric class
compatible with the Python environment, particularly within the context of the `validmind` package.
It registers the custom metric using the test ID and relevant attributes such as tasks and tags.
}
\details{
The `register_test` function takes an R function and performs the following operations:
- Converts the function name into a test ID if not provided.
- Inspects the function's formal arguments and creates a list of default parameters.
- Interacts with the Python environment using `reticulate` to create a corresponding Python class.
- Extracts any documentation, tasks, and tags associated with the function.
- Registers the custom test in the Python environment using the `test_store` object.

The function uses the Python `type` function to dynamically create a metric class with the following properties:
- `run`: The method to execute the function.
- `required_inputs`: A list of required input arguments.
- `default_params`: A list of default parameter values.
- `__doc__`: The function's documentation string.
- `tasks`: A list of tasks associated with the function.
- `tags`: A list of tags associated with the function.
}
\examples{
\dontrun{
custom_metric <- function(x, y) {
  return(x + y)
}
custom_metric <- decorator(custom_metric)
}

}
